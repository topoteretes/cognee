# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {
    "acreate_structured_output.baml": "class ResponseModel {\n    @@dynamic\n}\n\n// OpenAI client with environment model selection\nclient<llm> OpenAI {\n    provider openai\n    options {\n        model client_registry.model\n        api_key client_registry.api_key\n    }\n}\n\nfunction AcreateStructuredOutput(\n    text_input: string,\n    system_prompt: string,\n) -> ResponseModel {\n    client OpenAI\n\n    prompt #\"\n        {{ system_prompt }}\n        {{ ctx.output_format }}\n        {{ _.role('user') }}\n        {{ text_input }}\n    \"#\n}\n",
    "generators.baml": '// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: "python/pydantic", "typescript", "ruby/sorbet", "rest/openapi"\n    output_type "python/pydantic"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir "../"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version "0.206.0"\n\n    // Valid values: "sync", "async"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n',
}


def get_baml_files():
    return _file_map
