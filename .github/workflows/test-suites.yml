name: Test Suites

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
    types: [opened, synchronize, reopened, labeled]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RUNTIME__LOG_LEVEL: ERROR
  ENV: 'dev'

jobs:
  basic-tests:
    name: Basic Tests
    uses: ./.github/workflows/reusable_basic_tests.yml
    secrets:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GRAPHISTRY_USERNAME: ${{ secrets.GRAPHISTRY_USERNAME }}
      GRAPHISTRY_PASSWORD: ${{ secrets.GRAPHISTRY_PASSWORD }}

  integration-tests:
    name: Integration Tests
    needs: basic-tests
    uses: ./.github/workflows/reusable_integration_tests.yml
    secrets:
      LLM_MODEL: ${{ secrets.LLM_MODEL }}
      LLM_ENDPOINT: ${{ secrets.LLM_ENDPOINT }}
      LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
      LLM_API_VERSION: ${{ secrets.LLM_API_VERSION }}
      EMBEDDING_MODEL: ${{ secrets.EMBEDDING_MODEL }}
      EMBEDDING_ENDPOINT: ${{ secrets.EMBEDDING_ENDPOINT }}
      EMBEDDING_API_KEY: ${{ secrets.EMBEDDING_API_KEY }}
      EMBEDDING_API_VERSION: ${{ secrets.EMBEDDING_API_VERSION }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GRAPHISTRY_USERNAME: ${{ secrets.GRAPHISTRY_USERNAME }}
      GRAPHISTRY_PASSWORD: ${{ secrets.GRAPHISTRY_PASSWORD }}

  database-postgres-tests:
    name: PostgreSQL Tests
    needs: integration-tests
    uses: ./.github/workflows/reusable_database_tests.yml
    with:
      database-type: 'postgres'
    secrets:
      LLM_MODEL: ${{ secrets.LLM_MODEL }}
      LLM_ENDPOINT: ${{ secrets.LLM_ENDPOINT }}
      LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
      LLM_API_VERSION: ${{ secrets.LLM_API_VERSION }}
      EMBEDDING_MODEL: ${{ secrets.EMBEDDING_MODEL }}
      EMBEDDING_ENDPOINT: ${{ secrets.EMBEDDING_ENDPOINT }}
      EMBEDDING_API_KEY: ${{ secrets.EMBEDDING_API_KEY }}
      EMBEDDING_API_VERSION: ${{ secrets.EMBEDDING_API_VERSION }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

  database-neo4j-tests:
    name: Neo4j Tests
    needs: integration-tests
    uses: ./.github/workflows/reusable_database_tests.yml
    with:
      database-type: 'neo4j'
    secrets:
      LLM_MODEL: ${{ secrets.LLM_MODEL }}
      LLM_ENDPOINT: ${{ secrets.LLM_ENDPOINT }}
      LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
      LLM_API_VERSION: ${{ secrets.LLM_API_VERSION }}
      EMBEDDING_MODEL: ${{ secrets.EMBEDDING_MODEL }}
      EMBEDDING_ENDPOINT: ${{ secrets.EMBEDDING_ENDPOINT }}
      EMBEDDING_API_KEY: ${{ secrets.EMBEDDING_API_KEY }}
      EMBEDDING_API_VERSION: ${{ secrets.EMBEDDING_API_VERSION }}

  ollama-tests:
    name: Ollama Tests
    needs: integration-tests
    uses: ./.github/workflows/reusable_ollama_tests.yml
    secrets:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GRAPHISTRY_USERNAME: ${{ secrets.GRAPHISTRY_USERNAME }}
      GRAPHISTRY_PASSWORD: ${{ secrets.GRAPHISTRY_PASSWORD }}

  notebook-tests:
    name: Notebook Tests
    needs: integration-tests
    uses: ./.github/workflows/reusable_notebooks_tests.yml
    secrets: inherit

  python-version-tests:
    name: Python Version Tests
    needs: integration-tests
    uses: ./.github/workflows/reusable_python_version_tests.yml
    secrets:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GRAPHISTRY_USERNAME: ${{ secrets.GRAPHISTRY_USERNAME }}
      GRAPHISTRY_PASSWORD: ${{ secrets.GRAPHISTRY_PASSWORD }}

  # Add various database tests similar to chromadb, weaviate, kuzu, etc.
  chromadb-tests:
    name: ChromaDB Tests
    needs: integration-tests
    uses: ./.github/workflows/test_chromadb.yml
    secrets: inherit

  weaviate-tests:
    name: Weaviate Tests
    needs: integration-tests
    uses: ./.github/workflows/test_weaviate.yml
    secrets: inherit

  kuzu-tests:
    name: Kuzu Tests
    needs: integration-tests
    uses: ./.github/workflows/test_kuzu.yml
    secrets: inherit
    
  # Additional tests from existing workflows
  multi-metric-qa-eval:
    name: Multi-Metric QA Evaluation
    needs: integration-tests
    uses: ./.github/workflows/test_multimetric_qa_eval_run.yaml
    secrets: inherit
    
  graphrag-vs-rag:
    name: GraphRAG vs RAG Test
    needs: integration-tests
    uses: ./.github/workflows/test_graphrag_vs_rag_notebook.yml
    secrets: inherit

  # Additional vector databases
  milvus-tests:
    name: Milvus Tests
    needs: integration-tests
    uses: ./.github/workflows/test_milvus.yml
    secrets: inherit
    
  # Additional LLM tests
  gemini-tests:
    name: Gemini Tests
    needs: integration-tests
    uses: ./.github/workflows/test_gemini.yml
    secrets: inherit
    
  # Additional examples and frameworks
  multimedia-example:
    name: Multimedia Example
    needs: integration-tests
    uses: ./.github/workflows/test_multimedia_example.yaml
    secrets: inherit
    
  deduplication-tests:
    name: Deduplication Tests
    needs: integration-tests
    uses: ./.github/workflows/test_deduplication.yml
    secrets: inherit
    
  eval-framework:
    name: Evaluation Framework
    needs: integration-tests
    uses: ./.github/workflows/test_eval_framework.yml
    secrets: inherit
    
  descriptive-graph-metrics:
    name: Descriptive Graph Metrics
    needs: integration-tests
    uses: ./.github/workflows/test_descriptive_graph_metrics.yml
    secrets: inherit

  notify:
    name: Test Completion Status
    needs: [
      basic-tests, 
      integration-tests, 
      database-postgres-tests, 
      database-neo4j-tests, 
      ollama-tests, 
      notebook-tests, 
      python-version-tests,
      chromadb-tests,
      weaviate-tests,
      kuzu-tests,
      multi-metric-qa-eval,
      graphrag-vs-rag,
      milvus-tests,
      gemini-tests,
      multimedia-example,
      deduplication-tests,
      eval-framework,
      descriptive-graph-metrics
    ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check Status
        run: |
          if [[ "${{ needs.basic-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.database-postgres-tests.result }}" == "success" && 
                "${{ needs.database-neo4j-tests.result }}" == "success" && 
                "${{ needs.ollama-tests.result }}" == "success" &&
                "${{ needs.notebook-tests.result }}" == "success" &&
                "${{ needs.python-version-tests.result }}" == "success" &&
                "${{ needs.chromadb-tests.result }}" == "success" &&
                "${{ needs.weaviate-tests.result }}" == "success" &&
                "${{ needs.kuzu-tests.result }}" == "success" &&
                "${{ needs.multi-metric-qa-eval.result }}" == "success" &&
                "${{ needs.graphrag-vs-rag.result }}" == "success" &&
                "${{ needs.milvus-tests.result }}" == "success" &&
                "${{ needs.gemini-tests.result }}" == "success" &&
                "${{ needs.multimedia-example.result }}" == "success" &&
                "${{ needs.deduplication-tests.result }}" == "success" &&
                "${{ needs.eval-framework.result }}" == "success" &&
                "${{ needs.descriptive-graph-metrics.result }}" == "success" ]]; then
            echo "All test suites completed successfully!"
          else
            echo "One or more test suites failed."
            exit 1
          fi 